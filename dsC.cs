//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace CafeManager {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsC : DataSet {
        
        private ChargesDataTable tableCharges;
        
        public dsC() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsC(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Charges"] != null)) {
                    this.Tables.Add(new ChargesDataTable(ds.Tables["Charges"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ChargesDataTable Charges {
            get {
                return this.tableCharges;
            }
        }
        
        public override DataSet Clone() {
            dsC cln = ((dsC)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Charges"] != null)) {
                this.Tables.Add(new ChargesDataTable(ds.Tables["Charges"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableCharges = ((ChargesDataTable)(this.Tables["Charges"]));
            if ((this.tableCharges != null)) {
                this.tableCharges.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsC";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsC.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableCharges = new ChargesDataTable();
            this.Tables.Add(this.tableCharges);
        }
        
        private bool ShouldSerializeCharges() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ChargesRowChangeEventHandler(object sender, ChargesRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ChargesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnBlackPrint;
            
            private DataColumn columnColorPrint;
            
            private DataColumn columnIntCharges;
            
            private DataColumn columnScanCharges;
            
            internal ChargesDataTable() : 
                    base("Charges") {
                this.InitClass();
            }
            
            internal ChargesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn BlackPrintColumn {
                get {
                    return this.columnBlackPrint;
                }
            }
            
            internal DataColumn ColorPrintColumn {
                get {
                    return this.columnColorPrint;
                }
            }
            
            internal DataColumn IntChargesColumn {
                get {
                    return this.columnIntCharges;
                }
            }
            
            internal DataColumn ScanChargesColumn {
                get {
                    return this.columnScanCharges;
                }
            }
            
            public ChargesRow this[int index] {
                get {
                    return ((ChargesRow)(this.Rows[index]));
                }
            }
            
            public event ChargesRowChangeEventHandler ChargesRowChanged;
            
            public event ChargesRowChangeEventHandler ChargesRowChanging;
            
            public event ChargesRowChangeEventHandler ChargesRowDeleted;
            
            public event ChargesRowChangeEventHandler ChargesRowDeleting;
            
            public void AddChargesRow(ChargesRow row) {
                this.Rows.Add(row);
            }
            
            public ChargesRow AddChargesRow(int BlackPrint, int ColorPrint, int IntCharges, int ScanCharges) {
                ChargesRow rowChargesRow = ((ChargesRow)(this.NewRow()));
                rowChargesRow.ItemArray = new object[] {
                        BlackPrint,
                        ColorPrint,
                        IntCharges,
                        ScanCharges};
                this.Rows.Add(rowChargesRow);
                return rowChargesRow;
            }
            
            public ChargesRow FindByIntCharges(int IntCharges) {
                return ((ChargesRow)(this.Rows.Find(new object[] {
                            IntCharges})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ChargesDataTable cln = ((ChargesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ChargesDataTable();
            }
            
            internal void InitVars() {
                this.columnBlackPrint = this.Columns["BlackPrint"];
                this.columnColorPrint = this.Columns["ColorPrint"];
                this.columnIntCharges = this.Columns["IntCharges"];
                this.columnScanCharges = this.Columns["ScanCharges"];
            }
            
            private void InitClass() {
                this.columnBlackPrint = new DataColumn("BlackPrint", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBlackPrint);
                this.columnColorPrint = new DataColumn("ColorPrint", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnColorPrint);
                this.columnIntCharges = new DataColumn("IntCharges", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIntCharges);
                this.columnScanCharges = new DataColumn("ScanCharges", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnScanCharges);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnIntCharges}, true));
                this.columnIntCharges.AllowDBNull = false;
                this.columnIntCharges.Unique = true;
            }
            
            public ChargesRow NewChargesRow() {
                return ((ChargesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ChargesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ChargesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ChargesRowChanged != null)) {
                    this.ChargesRowChanged(this, new ChargesRowChangeEvent(((ChargesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ChargesRowChanging != null)) {
                    this.ChargesRowChanging(this, new ChargesRowChangeEvent(((ChargesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ChargesRowDeleted != null)) {
                    this.ChargesRowDeleted(this, new ChargesRowChangeEvent(((ChargesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ChargesRowDeleting != null)) {
                    this.ChargesRowDeleting(this, new ChargesRowChangeEvent(((ChargesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveChargesRow(ChargesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ChargesRow : DataRow {
            
            private ChargesDataTable tableCharges;
            
            internal ChargesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCharges = ((ChargesDataTable)(this.Table));
            }
            
            public int BlackPrint {
                get {
                    try {
                        return ((int)(this[this.tableCharges.BlackPrintColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCharges.BlackPrintColumn] = value;
                }
            }
            
            public int ColorPrint {
                get {
                    try {
                        return ((int)(this[this.tableCharges.ColorPrintColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCharges.ColorPrintColumn] = value;
                }
            }
            
            public int IntCharges {
                get {
                    return ((int)(this[this.tableCharges.IntChargesColumn]));
                }
                set {
                    this[this.tableCharges.IntChargesColumn] = value;
                }
            }
            
            public int ScanCharges {
                get {
                    try {
                        return ((int)(this[this.tableCharges.ScanChargesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCharges.ScanChargesColumn] = value;
                }
            }
            
            public bool IsBlackPrintNull() {
                return this.IsNull(this.tableCharges.BlackPrintColumn);
            }
            
            public void SetBlackPrintNull() {
                this[this.tableCharges.BlackPrintColumn] = System.Convert.DBNull;
            }
            
            public bool IsColorPrintNull() {
                return this.IsNull(this.tableCharges.ColorPrintColumn);
            }
            
            public void SetColorPrintNull() {
                this[this.tableCharges.ColorPrintColumn] = System.Convert.DBNull;
            }
            
            public bool IsScanChargesNull() {
                return this.IsNull(this.tableCharges.ScanChargesColumn);
            }
            
            public void SetScanChargesNull() {
                this[this.tableCharges.ScanChargesColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ChargesRowChangeEvent : EventArgs {
            
            private ChargesRow eventRow;
            
            private DataRowAction eventAction;
            
            public ChargesRowChangeEvent(ChargesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ChargesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
